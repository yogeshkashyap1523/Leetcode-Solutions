/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode* reverse(ListNode* head)
    {
        if(head == NULL || head->next ==NULL)
        {
            return head;
        }
        
        ListNode* newhead=reverse(head->next);
        head->next->next=head;
        head->next=NULL;

        return newhead;
    }
public:
    bool isPalindrome(ListNode* head) {
        ListNode* slow=head,*fast=head,*temp=head;
        
        while(fast != NULL && fast->next != NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        slow=reverse(slow);
        while(slow)
        {
            if(temp->val != slow->val)
                return false;
            temp = temp->next;
            slow = slow->next;
        }
        return true;
        

    }
};
